{
    "patches": [
        {
            "label": "2025-09-23_14-34-28",
            "content": "@@ -56,21 +56,8 @@\n tr):\n- # construtor\n %0A   \n@@ -89,19 +89,8 @@\n lor \n-# atributos\n %0A   \n@@ -266,16 +266,17 @@\n xWetness\n+ \n ():%0A    \n@@ -315,23 +315,20 @@\n xWetness\n+ \n ()%0A\n-    \n         \n@@ -332,16 +332,17 @@\n    print\n+ \n (%22toalha\n@@ -346,127 +346,17 @@\n lha \n-encharc\n+su\n ada%22)%0A%0A\n-    def isDry(self):%0A        return self.wetness == 0%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A\n     \n@@ -419,22 +419,8 @@\n P%22: \n-# early return\n %0A   \n@@ -561,24 +561,8 @@\n n 0 \n-# default return\n %0A%0A  \n@@ -593,18 +593,8 @@\n tr: \n-# toString\n %0A   \n@@ -609,19 +609,20 @@\n urn f%22Co\n+lo\n r:\n- \n %7Bself.co\n@@ -631,17 +631,13 @@\n r%7D, \n-Tamanho: \n+Size:\n %7Bsel\n@@ -649,17 +649,12 @@\n e%7D, \n-Umidade: \n+Wet:\n %7Bsel\n@@ -665,16 +665,25 @@\n tness%7D%22%0A\n+    %0A    \n %0Adef mai\n@@ -686,18 +686,21 @@\n  main():\n- \n %0A\n+    \n     towe\n@@ -719,16 +719,17 @@\n owel\n+ \n (%22%22, %22%22)\n  # 2\n@@ -728,84 +728,33 @@\n  %22%22)\n- # 2: criar um obj com qq valor inicial%0A    while True: # 3: loop infinito%0A%0A\n+%0A        while True:%0A    \n     \n@@ -778,146 +778,132 @@\n nput\n+ \n ()\n- # 4: perguntar ao usuario%0A        print(%22$%22 + line) # echo%0A        args: list%5Bstr%5D = line.split(%22 %22) # 5: separar argumentos%0A        %0A%0A\n+%0A            args: list%5Bstr%5D = line.split(%22 %22)%0A            %0A            if args %5B0%5D == %22end%22:%0A                 break%0A    \n     \n@@ -931,32 +931,36 @@\n d%22:%0A            \n+    \n break%0A        el\n@@ -949,32 +949,36 @@\n   break%0A        \n+  \n+  \n elif args%5B0%5D == \n@@ -970,24 +970,25 @@\n lif args\n+ \n %5B0%5D == %22\n criar%22: \n@@ -983,29 +983,17 @@\n == %22\n-criar%22: # color size%0A\n+new%22:%0A   \n     \n@@ -1000,16 +1000,17 @@\n         \n+ \n color: s\n@@ -1022,12 +1022,17 @@\n args\n+ \n %5B1%5D%0A\n+    \n     \n@@ -1067,24 +1067,28 @@\n             \n+    \n towel = Towe\n@@ -1088,16 +1088,17 @@\n  = Towel\n+ \n (color, \n@@ -1111,89 +1111,8 @@\n     \n-    elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A\n     \n@@ -1124,24 +1124,25 @@\n lif args\n+ \n %5B0%5D == %22\n torcer%22:\n@@ -1137,22 +1137,19 @@\n == %22\n-torcer\n+dry\n %22:%0A     \n     \n@@ -1148,67 +1148,8 @@\n     \n-       towel.wringOut()%0A        elif args%5B0%5D == %22enxugar%22:%0A\n     \n@@ -1191,24 +1191,29 @@\n             \n+ \n+    \n towel.dry(am\n@@ -1218,32 +1218,36 @@\n amount)%0A        \n+  \n+  \n elif args%5B0%5D == \n@@ -1239,24 +1239,25 @@\n lif args\n+ \n %5B0%5D == %22\n mostrar%22\n@@ -1252,18 +1252,20 @@\n == %22\n-mostrar%22:%0A\n+wow%22:%0A      \n     \n@@ -1268,24 +1268,26 @@\n             \n+  \n print(towel)\n@@ -1299,24 +1299,22 @@\n     \n+    \n else:\n- # 7: erro%0A\n+%0A    \n     \n@@ -1330,14 +1330,15 @@\n rint\n+ \n (%22\n-fail\n+erro\n : co\n@@ -1364,21 +1364,116 @@\n o%22)%0A\n-%0Amain() # passo 1\n+#towel1: Towel = Towel(%22blue%22, %22P%22)%0A#print(towel1)%0A#towel1.dry(5)%0A#towel1.dry(50)%0A#print(towel1)        %0A%0Amain()\n",
            "lines": "53"
        },
        {
            "label": "2025-10-03_18-05-02",
            "content": "class Towel:\n    def __init__(self, color: str, size: str): # construtor\n        self.color: str = color # atributos\n        self.size: str = size\n        self.wetness: int = 0\n    \n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\": # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0 # default return\n\n    def __str__(self) -> str: # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main(): \n    towel: Towel = Towel(\"\", \"\") # 2: criar um obj com qq valor inicial\n    while True: # 3: loop infinito\n\n        line: str = input() # 4: perguntar ao usuario\n        print(\"$\" + line) # echo\n        args: list[str] = line.split(\" \") # 5: separar argumentos\n        \n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\": # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else: # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\nmain() # passo 1",
            "lines": "58"
        }
    ]
}